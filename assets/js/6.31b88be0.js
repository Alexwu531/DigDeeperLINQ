(window.webpackJsonp=window.webpackJsonp||[]).push([[6],{188:function(e,t,r){e.exports=r.p+"assets/img/efficiency.c5d0e420.png"},189:function(e,t,r){e.exports=r.p+"assets/img/yieldBreakPoint.6b40cbb1.gif"},223:function(e,t,r){"use strict";r.r(t);var n=[function(){var e=this.$createElement,t=this._self._c||e;return t("h1",{attrs:{id:"仔細體會yield的甜美-yield介紹"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#仔細體會yield的甜美-yield介紹","aria-hidden":"true"}},[this._v("#")]),this._v(" 仔細體會"),t("code",[this._v("yield")]),this._v("的甜美: "),t("code",[this._v("yield")]),this._v("介紹")])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("但今天我們要當個探險家，到屋外探索"),t("code",[this._v("yield")]),this._v("的起源。")])},function(){var e=this.$createElement,t=this._self._c||e;return t("h2",{attrs:{id:"進化的程式碼"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#進化的程式碼","aria-hidden":"true"}},[this._v("#")]),this._v(" 進化的程式碼")])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("在這節中我們會看到程式碼也是會"),t("strong",[this._v("進化")]),this._v("的，總而言之先來個例子吧: "),t("strong",[this._v("在1到特定數字中輸出可以被某數整除的數列")]),this._v("，來看看下面的程式碼:")])},function(){var e=this.$createElement,t=this._self._c||e;return t("div",{staticClass:"language-C# extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[this._v('private static void outputDivide_for(int maxNum, int divide)\n{\n    for (int currentNum = 1; currentNum <= maxNum; currentNum++)\n    {\n        if (currentNum % divide != 0) continue;\n        Console.Write($"{currentNum} ");\n    }\n    Console.WriteLine();\n}\n')])])])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("我們用了一個"),t("code",[this._v("for")]),this._v("做完了所有的事情，很棒，但試著想想以下的情境:")])},function(){var e=this.$createElement,t=this._self._c||e;return t("ul",[t("li",[this._v("顯示方式要改成每行一個數字:")])])},function(){var e=this.$createElement,t=this._self._c||e;return t("div",{staticClass:"language-C# extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[this._v('for (int currentNum = 1; currentNum <= maxNum; currentNum++)\n{\n    if (currentNum % divide != 0) continue;\n    //Console.Write($"{currentNum} ");\n    Console.WriteLine($"{currentNum} ");\n}\nConsole.WriteLine();\n')])])])},function(){var e=this.$createElement,t=this._self._c||e;return t("ul",[t("li",[this._v("計算邏輯修改成: 在1到特定數字中輸出可以被"),t("strong",[this._v("某數的2倍")]),this._v("整除的數列:")])])},function(){var e=this.$createElement,t=this._self._c||e;return t("div",{staticClass:"language-C# extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[this._v('int divideMultitwo = divide * 2;\nfor (int currentNum = 1; currentNum <= maxNum; currentNum++)\n{\n    //if (currentNum % divide != 0) continue;\n    if (currentNum % divideMultitwo != 0) continue;\n    //Console.Write($"{currentNum} ");\n    Console.WriteLine($"{currentNum} ");\n}\nConsole.WriteLine();\n')])])])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("既然這樣，那先取得運算後的陣列存入"),t("code",[this._v("List")]),this._v("中，再用迴圈去顯示總可以了吧:")])},function(){var e=this.$createElement,t=this._self._c||e;return t("div",{staticClass:"language-C# extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[this._v('private static void outputDivide_foreach_List(int maxNum, int divide)\n{\n    foreach (int item in enumerable_List(maxNum, divide))\n    {\n        Console.Write($"{item} ");\n    }\n    Console.WriteLine();\n}\n\nprivate static IEnumerable enumerable_List(int maxNum, int divide)\n{\n    List<int> result = new List<int>();\n\n    for (int currentNum = 1; currentNum <= maxNum; currentNum++)\n    {\n        if (currentNum % divide != 0) continue;\n        result.Add(currentNum);\n    }\n    return result;\n}\n')])])])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("上面這樣寫的確符合了"),t("strong",[this._v("SRP")]),this._v("，但我們再回頭想想，發現這裡還是埋了一顆炸彈: "),t("strong",[this._v("效能問題")]),this._v("，請對程式碼做以下的調整:")])},function(){var e=this.$createElement,t=this._self._c||e;return t("ul",[t("li",[t("code",[this._v("outputDivide_for")]),this._v("改成下面這樣，直接"),t("code",[this._v("break")])])])},function(){var e=this.$createElement,t=this._self._c||e;return t("div",{staticClass:"language-C# extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[this._v("private static void outputDivide_for(int maxNum, int divide)\n{\n    for (int currentNum = 1; currentNum <= maxNum; currentNum++)\n    {\n        break;\n    }\n}\n")])])])},function(){var e=this.$createElement,t=this._self._c||e;return t("ul",[t("li",[t("code",[this._v("outputDivide_foreach_List")]),this._v("也一樣，直接"),t("code",[this._v("break")])])])},function(){var e=this.$createElement,t=this._self._c||e;return t("div",{staticClass:"language-C# extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[this._v("private static void outputDivide_foreach_List(int maxNum, int divide)\n{\n    foreach (int item in enumerable_List(maxNum, divide))\n    {\n        break;\n    }\n}\n")])])])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[t("img",{attrs:{src:r(188),alt:"efficiency"}})])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("各位應該猜到問題點了: 不管有沒有需要，"),t("code",[this._v("enumerable_List")]),this._v("裡的迴圈都會跑完，並且將取得的數值放到List中，這樣就算我們沒有實際使用到List，也一樣要耗費時間跟空間，相較之下原本的"),t("code",[this._v("for")]),this._v("反而沒有這個問題。")])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("可是難道一定要"),t("strong",[this._v("效能")]),this._v("跟"),t("strong",[this._v("可維護性")]),this._v("做二選一嗎?在這個例子是不需要的，我們只要用上一章所講的"),t("strong",[this._v("Iterator Pattern")]),this._v("就可以輕易地解決:")])},function(){var e=this.$createElement,t=this._self._c||e;return t("div",{staticClass:"language-C# extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[this._v("private static IEnumerable enumerable_Iterator(int maxNum, int divide)\n{\n    integersAggregate enumerable = new integersAggregate(maxNum, divide);\n    return enumerable;\n}\n\nprivate class integersAggregate : IEnumerable\n{\n    private int _maxNum;\n    private int _divide;\n\n    public integersAggregate(int maxNum, int divide)\n    {\n        _maxNum = maxNum;\n        _divide = divide;\n    }\n\n    public IEnumerator GetEnumerator()\n    {\n        return new integersInterator(_maxNum, _divide);\n    }\n}\nprivate class integersInterator : IEnumerator\n{\n    private int _maxNum;\n    private int _divide;\n    private int currentNum = 1;\n\n    public integersInterator(int maxNum, int divide)\n    {\n        _maxNum = maxNum;\n        _divide = divide;\n    }\n\n    public object Current { get; private set; }\n    \n    public bool MoveNext()\n    {\n        do\n        {\n            if (currentNum % _divide == 0)\n            {\n                Current = currentNum;\n                return true;\n            }\n            currentNum++;\n        } while (currentNum <= _maxNum);\n        return false;\n    }\n    \n    public void Reset()\n    {\n        currentNum = 1;\n    }\n}\n")])])])},function(){var e=this,t=e.$createElement,r=e._self._c||t;return r("p",[r("code",[e._v("foreach")]),e._v("跟"),r("code",[e._v("IEnumerable")]),e._v("搭配，每次都是叫用"),r("code",[e._v("MoveNext")]),e._v("來確定是否有下一個元素，如果有則將下一個元素值賦予"),r("code",[e._v("Current")]),e._v("變數，所以每次只會取得下一個元素，也不會增加額外的空間消費。")])},function(){var e=this.$createElement,t=this._self._c||e;return t("ul",[t("li",[this._v("可以保證計算的花費一定值得(效能問題解決)")]),this._v(" "),t("li",[this._v("可以將巡覽及計算邏輯拆分(可維護性提高)")])])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("但人天生就是懶惰，難道每次愈到巡覽的需求都要實作"),t("code",[this._v("IEnumerator")]),this._v("嗎?沒有辦法像宣告"),t("code",[this._v("List")]),this._v("那樣簡單明瞭了嗎?")])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[t("strong",[this._v("有的")]),this._v("，就是我們今天的主角"),t("code",[this._v("yield")]),this._v("。")])},function(){var e=this.$createElement,t=this._self._c||e;return t("h2",{attrs:{id:"yield"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#yield","aria-hidden":"true"}},[this._v("#")]),this._v(" yield")])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("一樣是上一節的例子，但我們改用"),t("code",[this._v("yield")]),this._v("來實作"),t("code",[this._v("IEnumerable")]),this._v(":")])},function(){var e=this.$createElement,t=this._self._c||e;return t("div",{staticClass:"language-C# extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[this._v("private static IEnumerable enumerable_yield(int maxNum, int divide)\n{\n    for (int currentNum = 1; currentNum <= maxNum; currentNum++)\n    {\n        if (currentNum % divide != 0) continue;\n        yield return currentNum;\n    }\n}\n")])])])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("就這樣?對，真的只要這樣就可以做到"),t("code",[this._v("Iterator Pattern")]),this._v("做的事情，但寫法卻跟"),t("code",[this._v("List")]),this._v("一樣簡單(如果要驗證可以使用解譯器，文末的參考也有些是以解譯後的程式做解釋的，有興趣可以去看看)。")])},function(){var e=this,t=e.$createElement,r=e._self._c||t;return r("ul",[r("li",[e._v("如果一個區塊(block)中有"),r("code",[e._v("yield")]),e._v("陳述式，此區塊就叫做"),r("strong",[e._v("Iterator Block")])]),e._v(" "),r("li",[e._v("一個方法的區塊如果是"),r("strong",[e._v("Iterator Block")]),e._v("，則它的回傳值會是"),r("code",[e._v("IEnumerable")]),e._v("、"),r("code",[e._v("IEnumerator")]),e._v("。")])])},function(){var e=this.$createElement,t=this._self._c||e;return t("h3",{attrs:{id:"運作方式"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#運作方式","aria-hidden":"true"}},[this._v("#")]),this._v(" 運作方式")])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("我們可以將中斷點下在"),t("code",[this._v("yield return")]),this._v("那行，然後一步一步執行看看會發生什麼事情，你會發現他跳回"),t("code",[this._v("foreach")]),this._v("中，又再跳回"),t("code",[this._v("yield block")]),this._v("中:")])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[t("img",{attrs:{src:r(189),alt:"yield break point"}})])},function(){var e=this,t=e.$createElement,r=e._self._c||t;return r("p",[e._v("這個執行順序顛覆了我們對程式的認知，一般的程式都會是迴圈完成後再回傳，而"),r("strong",[e._v("Iterator Block")]),e._v("卻是遇到了"),r("code",[e._v("yield return")]),e._v("就回傳而且執行完"),r("code",[e._v("foreach")]),e._v("的"),r("strong",[e._v("embedded_statement")]),e._v("後還能回到迴圈中繼續執行。")])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("現在試著把"),t("strong",[this._v("Iterator Block")]),this._v("想成是"),t("code",[this._v("Iterator")]),this._v("中的"),t("code",[this._v("MoveNext()")]),this._v("，再去看執行順序就比較容易看得懂了。")])},function(){var e=this,t=e.$createElement,r=e._self._c||t;return r("p",[r("code",[e._v("foreach")]),e._v("觸發"),r("code",[e._v("MoveNext()")]),e._v("時: 可以想成是去執行"),r("strong",[e._v("Iterator Block")]),e._v("內的程式碼，執行到"),r("code",[e._v("yield return")]),e._v("時它做了三件事情:")])},function(){var e=this,t=e.$createElement,r=e._self._c||t;return r("ul",[r("li",[r("strong",[e._v("Iterator Block")]),e._v("的執行暫停")]),e._v(" "),r("li",[e._v("將"),r("code",[e._v("Current")]),e._v("更新成"),r("code",[e._v("yield return")]),e._v("的value")]),e._v(" "),r("li",[r("code",[e._v("MoveNext()")]),e._v("回傳true")])])},function(){var e=this,t=e.$createElement,r=e._self._c||t;return r("p",[e._v("而"),r("code",[e._v("foreach")]),e._v("在執行完"),r("strong",[e._v("embedded_statement")]),e._v("後再次觸發"),r("code",[e._v("MoveNext()")]),e._v("時會從原本暫停的地方再執行下去直到"),r("strong",[e._v("Iterator Block")]),e._v("中的程式:")])},function(){var e=this.$createElement,t=this._self._c||e;return t("ul",[t("li",[this._v("再次觸發"),t("code",[this._v("yield return")])]),this._v(" "),t("li",[this._v("執行結束")]),this._v(" "),t("li",[t("code",[this._v("yield break")])])])},function(){var e=this.$createElement,t=this._self._c||e;return t("div",{staticClass:"language-C# extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[this._v("private static IEnumerable enumerable_yield2()\n{\n    yield return 1;\n    yield return 2;\n    yield return 3;\n    yield return 4;\n    yield return 5;\n    yield return 6;\n    yield return 7;\n    yield return 8;\n    yield return 9;\n    yield break;\n    yield return 10;\n\n    //1 2 3 4 5 6 7 8 9\n}\n")])])])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("其中"),t("code",[this._v("yield break")]),this._v("就是停止整個巡覽的動作，所以數列只會印到9而已。")])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("PS: 本節可以搭配上一篇介紹的"),t("code",[this._v("foreach")]),this._v("來做學習，會比較好懂。")])},function(){var e=this.$createElement,t=this._self._c||e;return t("h3",{attrs:{id:"為什麼叫做yield"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#為什麼叫做yield","aria-hidden":"true"}},[this._v("#")]),this._v(" 為什麼叫做"),t("code",[this._v("yield")])])},function(){var e=this.$createElement,t=this._self._c||e;return t("h2",{attrs:{id:"結語"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#結語","aria-hidden":"true"}},[this._v("#")]),this._v(" 結語")])},function(){var e=this,t=e.$createElement,r=e._self._c||t;return r("p",[e._v("說到這裡我們的旅程也告一段落了，今天用比較的方式了解"),r("code",[e._v("yield")]),e._v("的原貌，"),r("code",[e._v("for")]),e._v("到"),r("code",[e._v("List")]),e._v("再到"),r("code",[e._v("yield")]),e._v("，我們的開發過程也越來越輕鬆，但在使用這些"),r("strong",[e._v("語法糖")]),e._v("時，也不要忽略了它們背後的意義，因為這往往是它們最有價值的部分。")])},function(){var e=this.$createElement,t=this._self._c||e;return t("h2",{attrs:{id:"範例程式"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#範例程式","aria-hidden":"true"}},[this._v("#")]),this._v(" 範例程式")])},function(){var e=this.$createElement,t=this._self._c||e;return t("h2",{attrs:{id:"參考"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#參考","aria-hidden":"true"}},[this._v("#")]),this._v(" 參考")])}],i=r(0),s=Object(i.a)({},function(){var e=this,t=e.$createElement,r=e._self._c||t;return r("div",{staticClass:"content"},[e._m(0),e._v(" "),r("p",[e._v("記得以前在學校學寫程式時是寫C語言，那時候認為寫程式要自己實作Linked List等的資料結構是理所當然的事情，就安分守己的自己實作，也沒有多想什麼。")]),e._v(" "),r("p",[e._v("但是自從我開始寫C#後，遇到資料結構的問題都不是去查怎麼實作了，而是去翻"),r("strong",[e._v("Microsoft Docs")]),e._v("看有沒有可以套用的物件...，C#的方便帶來了很多好處(上手簡單、開發時間縮短...等)，就好像進到了糖果屋一樣，想要吃什麼糖果("),r("a",{attrs:{href:"https://zh.wikipedia.org/wiki/%E8%AF%AD%E6%B3%95%E7%B3%96",target:"_blank",rel:"noopener noreferrer"}},[e._v("語法糖"),r("OutboundLink")],1),e._v(")都應有盡有，不怕你吃就怕你不吃，我自己就是很愛吃糖的其中一位。")]),e._v(" "),e._m(1),e._v(" "),e._m(2),e._v(" "),e._m(3),e._v(" "),e._m(4),e._m(5),e._v(" "),e._m(6),e._v(" "),e._m(7),e._m(8),e._v(" "),e._m(9),r("p",[e._v("注意到問題了嗎?我們在改變顯示方式及運算邏輯時都動到了這段程式碼，違反了"),r("a",{attrs:{href:"https://en.wikipedia.org/wiki/Single_responsibility_principle",target:"_blank",rel:"noopener noreferrer"}},[e._v("Single responsibility principle"),r("OutboundLink")],1),e._v("。")]),e._v(" "),e._m(10),e._v(" "),e._m(11),e._m(12),e._v(" "),e._m(13),e._v(" "),e._m(14),e._m(15),e._v(" "),e._m(16),e._m(17),e._v(" "),e._m(18),e._v(" "),e._m(19),e._v(" "),e._m(20),e._m(21),e._v(" "),r("p",[e._v("使用這樣的方式解決了我們擔心的兩個問題")]),e._v(" "),e._m(22),e._v(" "),e._m(23),e._v(" "),e._m(24),e._v(" "),e._m(25),e._v(" "),e._m(26),e._v(" "),e._m(27),e._m(28),e._v(" "),r("p",[e._v("這邊有幾個重點:")]),e._v(" "),e._m(29),e._v(" "),e._m(30),e._v(" "),e._m(31),e._v(" "),e._m(32),e._v(" "),e._m(33),e._v(" "),e._m(34),e._v(" "),e._m(35),e._v(" "),e._m(36),e._v(" "),e._m(37),e._v(" "),e._m(38),e._v(" "),r("p",[e._v("這點可以用下面這個例子說明:")]),e._v(" "),e._m(39),e._m(40),e._v(" "),e._m(41),e._v(" "),e._m(42),e._v(" "),r("p",[e._v("依照"),r("a",{attrs:{href:"https://docs.microsoft.com/zh-tw/dotnet/csharp/language-reference/language-specification/classes#iterators",target:"_blank",rel:"noopener noreferrer"}},[e._v("C# 語言規格-類別"),r("OutboundLink")],1),e._v("定義，"),r("code",[e._v("Yield Type")]),e._v("代表"),r("code",[e._v("Iterator")]),e._v("的回傳資料型態，所以"),r("code",[e._v("yield")]),e._v("就是"),r("code",[e._v("Iterator")]),e._v("的回傳資料。")]),e._v(" "),e._m(43),e._v(" "),e._m(44),e._v(" "),e._m(45),e._v(" "),r("p",[r("a",{attrs:{href:"https://github.com/peterhpchen/DigDeeperLINQ/tree/develop/demo/05_yield",target:"_blank",rel:"noopener noreferrer"}},[e._v("GitHub"),r("OutboundLink")],1)]),e._v(" "),e._m(46),e._v(" "),r("ul",[r("li",[r("a",{attrs:{href:"https://docs.microsoft.com/zh-tw/dotnet/csharp/language-reference/language-specification/statements#the-yield-statement",target:"_blank",rel:"noopener noreferrer"}},[e._v("C# spec-statements#the-yield-statement"),r("OutboundLink")],1)]),e._v(" "),r("li",[r("a",{attrs:{href:"https://docs.microsoft.com/zh-tw/dotnet/csharp/language-reference/language-specification/statements#blocks",target:"_blank",rel:"noopener noreferrer"}},[e._v("C# spec-statements#blocks"),r("OutboundLink")],1)]),e._v(" "),r("li",[r("a",{attrs:{href:"https://docs.microsoft.com/zh-tw/dotnet/csharp/language-reference/language-specification/classes#iterators",target:"_blank",rel:"noopener noreferrer"}},[e._v("C# spec-classes#iterators"),r("OutboundLink")],1)]),e._v(" "),r("li",[r("a",{attrs:{href:"http://columns.chicken-house.net/2008/09/18/c-yield-return-1-how-it-work/",target:"_blank",rel:"noopener noreferrer"}},[e._v("安德魯的部落格-[C#: yield return] #1. How It Work ?"),r("OutboundLink")],1)]),e._v(" "),r("li",[r("a",{attrs:{href:"https://stackoverflow.com/a/410058",target:"_blank",rel:"noopener noreferrer"}},[e._v("stackoverflow-Proper use of 'yield return'"),r("OutboundLink")],1)]),e._v(" "),r("li",[r("a",{attrs:{href:"http://limitedcode.blogspot.tw/2014/07/c-yeild.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("限量ㄟ蓋步-C# - yeild return 使用方法"),r("OutboundLink")],1)]),e._v(" "),r("li",[r("a",{attrs:{href:"https://docs.microsoft.com/zh-tw/dotnet/csharp/language-reference/keywords/yield",target:"_blank",rel:"noopener noreferrer"}},[e._v("Microsoft Docs-yield"),r("OutboundLink")],1)]),e._v(" "),r("li",[r("a",{attrs:{href:"https://www.kenneth-truyers.net/2016/05/12/yield-return-in-c/",target:"_blank",rel:"noopener noreferrer"}},[e._v("Kenneth Truyers-Yield return in C#"),r("OutboundLink")],1)]),e._v(" "),r("li",[r("a",{attrs:{href:"http://csharpindepth.com/Articles/Chapter6/IteratorBlockImplementation.aspx",target:"_blank",rel:"noopener noreferrer"}},[e._v("C# in Depth-Iterator Block Implementation"),r("OutboundLink")],1)])])])},n,!1,null,null,null);t.default=s.exports}}]);