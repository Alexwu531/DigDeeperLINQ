(window.webpackJsonp=window.webpackJsonp||[]).push([[22],{216:function(e,t,r){"use strict";r.r(t);var n=r(0),s=Object(n.a)({},function(){var e=this,t=e.$createElement,r=e._self._c||t;return r("div",{staticClass:"content"},[e._m(0),e._v(" "),e._m(1),e._v(" "),e._m(2),e._v(" "),e._m(3),e._v(" "),e._m(4),e._m(5),e._v(" "),e._m(6),e._v(" "),e._m(7),e._m(8),e._v(" "),e._m(9),e._v(" "),e._m(10),e._m(11),e._v(" "),e._m(12),e._v(" "),e._m(13),e._v(" "),e._m(14),e._m(15),e._v(" "),e._m(16),e._v(" "),e._m(17),e._m(18),e._v(" "),e._m(19),e._v(" "),e._m(20),e._v(" "),e._m(21),e._v(" "),e._m(22),r("p",[e._v("學一套就會了全部，這個方法中完全沒有新的東西，只是把第一跟第二個方法合併起來而已。")]),e._v(" "),e._m(23),e._v(" "),e._m(24),e._v(" "),e._m(25),e._m(26),e._v(" "),e._m(27),e._m(28),e._v(" "),e._m(29),e._m(30),e._v(" "),e._m(31),e._v(" "),e._m(32),e._v(" "),e._m(33),e._v(" "),e._m(34),e._v(" "),e._m(35),e._m(36),e._v(" "),e._m(37),e._v(" "),e._m(38),e._v(" "),e._m(39),e._v(" "),e._m(40),e._v(" "),e._m(41),e._m(42),e._v(" "),e._m(43),e._v(" "),e._m(44),e._v(" "),e._m(45),e._m(46),e._v(" "),e._m(47),e._m(48),e._v(" "),e._m(49),e._v(" "),e._m(50),e._v(" "),e._m(51),e._v(" "),r("ul",[r("li",[r("a",{attrs:{href:"https://github.com/dotnet/corefx",target:"_blank",rel:"noopener noreferrer"}},[e._v("dotnet/corefx"),r("OutboundLink")],1)]),e._v(" "),r("li",[r("a",{attrs:{href:"https://msdn.microsoft.com/zh-tw/library/bb548651(v=vs.110).aspx",target:"_blank",rel:"noopener noreferrer"}},[e._v("Enumerable.Aggregate"),r("OutboundLink")],1)])])])},[function(){var e=this.$createElement,t=this._self._c||e;return t("h1",{attrs:{id:"selectmany的原碼探險"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#selectmany的原碼探險","aria-hidden":"true"}},[this._v("#")]),this._v(" SelectMany的原碼探險")])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[t("code",[this._v("Select")]),this._v("及"),t("code",[this._v("SelectMany")]),this._v("的差別在前一章的說明後應該有個初步的了解了，知道了應用的方式後我們接著來看看它是怎麼做到的吧。")])},function(){var e=this.$createElement,t=this._self._c||e;return t("h2",{attrs:{id:"原始碼分析"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#原始碼分析","aria-hidden":"true"}},[this._v("#")]),this._v(" 原始碼分析")])},function(){var e=this,t=e.$createElement,r=e._self._c||t;return r("ul",[r("li",[e._v("Source Code: https://github.com/dotnet/corefx/blob/master/src/System.Linq/src/System/Linq/SelectMany.cs")]),e._v(" "),r("li",[e._v("Public Method: "),r("code",[e._v("SelectMany")]),e._v("總共有四個多載的方法，兩個是只有"),r("strong",[e._v("一個")]),r("code",[e._v("selector")]),e._v("，另外兩個是有"),r("strong",[e._v("兩個")]),r("code",[e._v("selector")]),e._v("("),r("code",[e._v("collectionSelector")]),e._v("及"),r("code",[e._v("resultSelector")]),e._v(")")])])},function(){var e=this.$createElement,t=this._self._c||e;return t("div",{staticClass:"language-C# extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[this._v("/* 下面兩個方法只有一個selector */\npublic static IEnumerable<TResult> SelectMany<TSource, TResult>(    // 4\n    this IEnumerable<TSource> source, \n    Func<TSource, IEnumerable<TResult>> selector);\n    \npublic static IEnumerable<TResult> SelectMany<TSource, TResult>(    // 1\n    this IEnumerable<TSource> source, \n    Func<TSource, int, IEnumerable<TResult>> selector); // 多一個int參數\n\n/* 下面兩個方法有兩個selector */\npublic static IEnumerable<TResult> SelectMany<TSource, TCollection, TResult>(   // 2\n    this IEnumerable<TSource> source, \n    Func<TSource, IEnumerable<TCollection>> collectionSelector, \n    Func<TSource, TCollection, TResult> resultSelector);\n    \npublic static IEnumerable<TResult> SelectMany<TSource, TCollection, TResult>(   // 3\n    this IEnumerable<TSource> source, \n    Func<TSource, int, IEnumerable<TCollection>> collectionSelector, // 多一個int參數\n    Func<TSource, TCollection, TResult> resultSelector);\n")])])])},function(){var e=this.$createElement,t=this._self._c||e;return t("ul",[t("li",[this._v("方法的右邊註解的數字為等下講解的順序")])])},function(){var e=this.$createElement,t=this._self._c||e;return t("ol",[t("li",[this._v("第一個看的是只有"),t("strong",[this._v("一個")]),t("code",[this._v("selector")]),this._v("但有"),t("code",[this._v("int")]),this._v("傳入參數的方法:")])])},function(){var e=this.$createElement,t=this._self._c||e;return t("div",{staticClass:"language-C# extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[this._v("public static IEnumerable<TResult> SelectMany<TSource, TResult>(\n    this IEnumerable<TSource> source, Func<TSource, int, IEnumerable<TResult>> selector)\n{\n    if (source == null)\n    {\n        throw Error.ArgumentNull(nameof(source));\n    }\n\n    if (selector == null)\n    {\n        throw Error.ArgumentNull(nameof(selector));\n    }\n\n    return SelectManyIterator(source, selector);\n}\n")])])])},function(){var e=this,t=e.$createElement,r=e._self._c||t;return r("ul",[r("li",[e._v("判斷"),r("code",[e._v("source")]),e._v("及"),r("code",[e._v("selector")]),e._v("是否為空，為空的話丟"),r("code",[e._v("ArgumentNull")]),e._v("例外")]),e._v(" "),r("li",[e._v("傳回"),r("code",[e._v("SelectManyIterator")])])])},function(){var e=this,t=e.$createElement,r=e._self._c||t;return r("p",[e._v("到這裡跟"),r("code",[e._v("Select")]),e._v("幾乎一模一樣，唯一有差別的就只有最後的回傳值，"),r("code",[e._v("SelectMany")]),e._v("是傳回"),r("code",[e._v("SelectManyIterator")]),e._v("，相信特別之處就是在這裡，我們來看看"),r("code",[e._v("SelectMany")]),e._v("的定義:")])},function(){var e=this.$createElement,t=this._self._c||e;return t("div",{staticClass:"language-C# extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[this._v("private static IEnumerable<TResult> SelectManyIterator<TSource, TResult>(\n    IEnumerable<TSource> source, Func<TSource, int, IEnumerable<TResult>> selector)\n{\n    int index = -1;\n    foreach (TSource element in source)\n    {\n        checked\n        {\n            index++;\n        }\n\n        foreach (TResult subElement in selector(element, index))\n        {\n            yield return subElement;\n        }\n    }\n}\n")])])])},function(){var e=this,t=e.$createElement,r=e._self._c||t;return r("ul",[r("li",[e._v("此方法區塊為"),r("code",[e._v("yield")]),e._v("區塊，會轉為"),r("code",[e._v("Iterator Pattern")]),e._v("，回傳的資料是"),r("code",[e._v("IEnumerable")]),e._v("的集合")]),e._v(" "),r("li",[r("code",[e._v("yield return")]),e._v("傳回"),r("strong",[e._v("每一個元素")]),e._v("的資料")]),e._v(" "),r("li",[e._v("每個元素的"),r("code",[e._v("index")]),e._v("較前面的元素多加"),r("strong",[e._v("1")])]),e._v(" "),r("li",[r("code",[e._v("selector")]),e._v("執行後取得每個元素的"),r("strong",[e._v("子集合")]),e._v("資料，再用"),r("code",[e._v("foreach")]),e._v("巡覽整個"),r("strong",[e._v("子集合")])]),e._v(" "),r("li",[e._v("傳回"),r("strong",[e._v("子集合")]),e._v("的每個元素")])])},function(){var e=this,t=e.$createElement,r=e._self._c||t;return r("p",[e._v("我們可以看到跟"),r("code",[e._v("SelectIterator")]),e._v("還是幾乎一模一樣，差別在於"),r("strong",[e._v("第二個")]),r("code",[e._v("foreach")]),e._v("，還記得我們前面講"),r("strong",[e._v("SelectMany的應用")]),e._v("時比較了跟"),r("code",[e._v("Select")]),e._v("的差別之處就是"),r("code",[e._v("SelectMany")]),e._v("不用多一個迴圈去處理子集合的資料，從原始碼中觀察就更加明顯了，原來"),r("code",[e._v("SelectMany")]),e._v("已經幫我們把"),r("strong",[e._v("第二個")]),e._v("迴圈要做的事情給做掉了。")])},function(){var e=this.$createElement,t=this._self._c||e;return t("ol",{attrs:{start:"2"}},[t("li",[this._v("接著我們要來看有兩個"),t("code",[this._v("selector")]),this._v("(collectionSelector及resultSelector)但"),t("code",[this._v("CollectionSelector")]),this._v("沒有"),t("code",[this._v("int")]),this._v("參數的方法:")])])},function(){var e=this.$createElement,t=this._self._c||e;return t("div",{staticClass:"language-C# extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[this._v("public static IEnumerable<TResult> SelectMany<TSource, TCollection, TResult>(\n    this IEnumerable<TSource> source, \n    Func<TSource, IEnumerable<TCollection>> collectionSelector, \n    Func<TSource, TCollection, TResult> resultSelector)\n{\n    if (source == null)\n    {\n        throw Error.ArgumentNull(nameof(source));\n    }\n\n    if (collectionSelector == null)\n    {\n        throw Error.ArgumentNull(nameof(collectionSelector));\n    }\n\n    if (resultSelector == null)\n    {\n        throw Error.ArgumentNull(nameof(resultSelector));\n    }\n\n    return SelectManyIterator(source, collectionSelector, resultSelector);\n}\n")])])])},function(){var e=this,t=e.$createElement,r=e._self._c||t;return r("ul",[r("li",[e._v("判斷"),r("code",[e._v("source")]),e._v("及"),r("code",[e._v("selector")]),e._v("是否為空，空的話丟出"),r("code",[e._v("ArgumentNull")]),e._v("的例外")]),e._v(" "),r("li",[e._v("傳回"),r("code",[e._v("SelectManyIterator")])])])},function(){var e=this,t=e.$createElement,r=e._self._c||t;return r("p",[e._v("這個方法跟剛剛介紹的第一個"),r("code",[e._v("SelectMany")]),e._v("的方法差在多了一個"),r("code",[e._v("if")]),e._v("判斷"),r("code",[e._v("resultSelector")]),e._v("是否為空，然後回傳的方法"),r("code",[e._v("SelectManyIterator")]),e._v("有"),r("strong",[e._v("三個參數")]),e._v("，想當然，這裡不會是重點所在，我們接著來看看這個有"),r("strong",[e._v("三個參數")]),e._v("的"),r("code",[e._v("SelectManyIterator")]),e._v(":")])},function(){var e=this.$createElement,t=this._self._c||e;return t("div",{staticClass:"language-C# extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[this._v("private static IEnumerable<TResult> SelectManyIterator<TSource, TCollection, TResult>(\n    IEnumerable<TSource> source, \n    Func<TSource, IEnumerable<TCollection>> collectionSelector, \n    Func<TSource, TCollection, TResult> resultSelector)\n{\n    foreach (TSource element in source)\n    {\n        foreach (TCollection subElement in collectionSelector(element))\n        {\n            yield return resultSelector(element, subElement);\n        }\n    }\n}\n")])])])},function(){var e=this.$createElement,t=this._self._c||e;return t("ul",[t("li",[this._v("回傳值為"),t("code",[this._v("resultSelector")]),this._v("執行後的結果")])])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("跟第一個介紹的方法差別只差在子集合的元素要回傳前再去執行了"),t("code",[this._v("resultSelector")]),this._v("，這樣的目的就是可以輸出"),t("strong",[this._v("子集合")]),this._v("跟"),t("strong",[this._v("原集合")]),this._v("合併的資料。")])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("我們可以看到它跟第一個方法的結構是完全一樣的，但是有"),t("code",[this._v("resultSelector")]),this._v("的幫助讓我們可以更省力的拿到自己想要的檔案。")])},function(){var e=this,t=e.$createElement,r=e._self._c||t;return r("ol",{attrs:{start:"3"}},[r("li",[r("strong",[e._v("第三個")]),e._v("方法是有"),r("code",[e._v("int")]),e._v("的"),r("code",[e._v("collectionSelector")]),e._v("的方法，因為方法的實作跟"),r("strong",[e._v("第二個")]),e._v("完全一樣，我們就直接來看"),r("code",[e._v("SelectManyIterator")]),e._v("的實作:")])])},function(){var e=this.$createElement,t=this._self._c||e;return t("div",{staticClass:"language-C# extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[this._v("private static IEnumerable<TResult> SelectManyIterator<TSource, TCollection, TResult>(\n    IEnumerable<TSource> source, \n    Func<TSource, int, IEnumerable<TCollection>> collectionSelector, \n    Func<TSource, TCollection, TResult> resultSelector)\n{\n    int index = -1;\n    foreach (TSource element in source)\n    {\n        checked\n        {\n            index++;\n        }\n\n        foreach (TCollection subElement in collectionSelector(element, index))\n        {\n            yield return resultSelector(element, subElement);\n        }\n    }\n}\n")])])])},function(){var e=this,t=e.$createElement,r=e._self._c||t;return r("ul",[r("li",[e._v("用"),r("code",[e._v("index")]),e._v("來給予每個"),r("code",[e._v("selector")]),e._v("位置的資訊(第一個方法)")]),e._v(" "),r("li",[e._v("回傳"),r("code",[e._v("resultSelector")]),e._v("執行結果(第二個方法)")])])},function(){var e=this.$createElement,t=this._self._c||e;return t("ol",{attrs:{start:"4"}},[t("li",[this._v("接著我們要來看最後一個方法了:")])])},function(){var e=this.$createElement,t=this._self._c||e;return t("div",{staticClass:"language-C# extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[this._v("public static IEnumerable<TResult> SelectMany<TSource, TResult>(this IEnumerable<TSource> source, Func<TSource, IEnumerable<TResult>> selector)\n{\n    if (source == null)\n    {\n        throw Error.ArgumentNull(nameof(source));\n    }\n\n    if (selector == null)\n    {\n        throw Error.ArgumentNull(nameof(selector));\n    }\n\n    return new SelectManySingleSelectorIterator<TSource, TResult>(source, selector);\n}\n")])])])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("跟前面的方法一樣，判斷參數是否為空，如果都是合法的就傳給"),t("code",[this._v("Iterator")]),this._v("做事，眼尖的人應該有發現到這次叫用的"),t("code",[this._v("Iterator")]),this._v("跟前面方法叫用的並不相同，看來是有什麼秘密藏在這裡喔，我們來看看吧:")])},function(){var e=this.$createElement,t=this._self._c||e;return t("div",{staticClass:"language-C# extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[this._v("private sealed class SelectManySingleSelectorIterator<TSource, TResult> : \n    Iterator<TResult>, \n    IIListProvider<TResult>\n")])])])},function(){var e=this,t=e.$createElement,r=e._self._c||t;return r("p",[e._v("這是一個實作了"),r("code",[e._v("Iterator")]),e._v("的"),r("code",[e._v("Class")]),e._v("，看到"),r("code",[e._v("Iterator")]),e._v("的"),r("code",[e._v("Class")]),e._v("自然就會想看看它的"),r("code",[e._v("MoveNext")]),e._v("，以下是它的實作:")])},function(){var e=this.$createElement,t=this._self._c||e;return t("div",{staticClass:"language-C# extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[this._v("public override bool MoveNext()\n{\n    switch (_state)\n    {\n        case 1:\n            // Retrieve the source enumerator.\n            _sourceEnumerator = _source.GetEnumerator();\n            _state = 2;\n            goto case 2;\n        case 2:\n            // Take the next element from the source enumerator.\n            if (!_sourceEnumerator.MoveNext())\n            {\n                break;\n            }\n\n            TSource element = _sourceEnumerator.Current;\n\n            // Project it into a sub-collection and get its enumerator.\n            _subEnumerator = _selector(element).GetEnumerator();\n            _state = 3;\n            goto case 3;\n        case 3:\n            // Take the next element from the sub-collection and yield.\n            if (!_subEnumerator.MoveNext())\n            {\n                _subEnumerator.Dispose();\n                _subEnumerator = null;\n                _state = 2;\n                goto case 2;\n            }\n\n            _current = _subEnumerator.Current;\n            return true;\n    }\n\n    Dispose();\n    return false;\n}\n")])])])},function(){var e=this,t=e.$createElement,r=e._self._c||t;return r("ul",[r("li",[r("code",[e._v("_state")]),e._v("在"),r("code",[e._v("GetEnumerator()")]),e._v("時會設為"),r("strong",[e._v("1")]),e._v("(請參考第11章-"),r("em",[e._v("Select的原碼探險")]),e._v(")")]),e._v(" "),r("li",[r("code",[e._v("_state")]),e._v("為"),r("strong",[e._v("1")]),e._v("時取得"),r("strong",[e._v("集合")]),e._v("的"),r("code",[e._v("Enumerator")])]),e._v(" "),r("li",[r("code",[e._v("_state")]),e._v("為"),r("strong",[e._v("2")]),e._v("時對集合執行"),r("code",[e._v("_selector")]),e._v("取得目標資料，到這裡為止就是"),r("code",[e._v("Select")]),e._v("的"),r("code",[e._v("MoveNext()")]),e._v("所做的事，但"),r("code",[e._v("SelectMany")]),e._v("將目標資料的"),r("code",[e._v("Enumerator")]),e._v("取得放進"),r("code",[e._v("_subEnumerator")]),e._v("並且進入"),r("strong",[e._v("第三狀態")]),e._v("("),r("code",[e._v("_state=3")]),e._v(")")]),e._v(" "),r("li",[r("code",[e._v("_state")]),e._v("為"),r("strong",[e._v("3")]),e._v("時將子集合的"),r("code",[e._v("Enumerator")]),e._v("("),r("code",[e._v("_subEnumerator")]),e._v(")做巡覽放進"),r("code",[e._v("_current")]),e._v("裡面，如果巡覽終止則將狀態調回"),r("strong",[e._v("2")]),e._v("("),r("code",[e._v("_state=2")]),e._v(")")])])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("實際上"),t("code",[this._v("SelectMany")]),this._v("比"),t("code",[this._v("Select")]),this._v("多了一層的"),t("code",[this._v("MoveNext()")]),this._v("來取得子集合的元素資料，達到扁平化的目的。")])},function(){var e=this.$createElement,t=this._self._c||e;return t("h2",{attrs:{id:"測試案例分析"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#測試案例分析","aria-hidden":"true"}},[this._v("#")]),this._v(" 測試案例分析")])},function(){var e=this.$createElement,t=this._self._c||e;return t("ul",[t("li",[this._v("Source Code: https://github.com/dotnet/corefx/blob/master/src/System.Linq/tests/SelectManyTests.cs")])])},function(){var e=this.$createElement,t=this._self._c||e;return t("h3",{attrs:{id:"parameterizedtests"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#parameterizedtests","aria-hidden":"true"}},[this._v("#")]),this._v(" ParameterizedTests")])},function(){var e=this.$createElement,t=this._self._c||e;return t("div",{staticClass:"language-C# extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[this._v("[Theory]\n[MemberData(nameof(ParameterizedTestsData))]\npublic void ParameterizedTests(IEnumerable<int> source, Func<int, IEnumerable<int>>selector)\n{\n    var expected = source.Select(i => selector(i)).Aggregate((l, r) => l.Concat(r));\n    var actual = source.SelectMany(selector);\n\n    Assert.Equal(expected, actual);\n    Assert.Equal(expected.Count(), actual.Count()); // SelectMany may employ an optimized Count implementation.\n    Assert.Equal(expected.ToArray(), actual.ToArray());\n    Assert.Equal(expected.ToList(), actual.ToList());\n}\n\npublic static IEnumerable<object[]> ParameterizedTestsData()\n{\n    for (int i = 1; i <= 20; i++)\n    {\n        Func<int, IEnumerable<int>> selector = n => Enumerable.Range(i, n);\n        yield return new object[] { Enumerable.Range(1, i), selector };\n    }\n}\n")])])])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[t("code",[this._v("Aggregate()")]),this._v("會將每個目前巡覽的結果向後一個元素丟，以上述程式碼為例"),t("code",[this._v("Aggregate((l, r) => l.Concat(r))")]),this._v(":")])},function(){var e=this.$createElement,t=this._self._c||e;return t("ul",[t("li",[t("code",[this._v("l")]),this._v(": 前個元素執行"),t("code",[this._v("Aggregate")]),this._v("後的值")]),this._v(" "),t("li",[t("code",[this._v("r")]),this._v(": 目前的元素值")])])},function(){var e=this,t=e.$createElement,r=e._self._c||t;return r("p",[e._v("所以"),r("code",[e._v("Aggregate((l, r) => l.Concat(r))")]),e._v("是把所有元素合為一個"),r("code",[e._v("IEnumerable")]),e._v("，而在這個測試案例我們可以發現到"),r("code",[e._v("SelectMany()")]),e._v("可以轉為"),r("code",[e._v("Select().Aggregate((l, r) => l.Concat(r))")]),e._v("。")])},function(){var e=this.$createElement,t=this._self._c||e;return t("h3",{attrs:{id:"disposeafterenumeration"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#disposeafterenumeration","aria-hidden":"true"}},[this._v("#")]),this._v(" DisposeAfterEnumeration")])},function(){var e=this,t=e.$createElement,r=e._self._c||t;return r("p",[e._v("這是一個驗證"),r("code",[e._v("Dispose")]),e._v("執行的測試，在剛剛觀察程式碼後我們知道在巡覽("),r("code",[e._v("MoveNext()")]),e._v(")過程中會產生兩層"),r("code",[e._v("Enumerator")]),e._v("("),r("strong",[e._v("Source")]),e._v("及"),r("strong",[e._v("Sub")]),e._v(")，這個測試就是要確定"),r("code",[e._v("Enumerator")]),e._v("都有在應該"),r("code",[e._v("Dispose")]),e._v("時"),r("code",[e._v("Dispose")]),e._v("，由於案例較長，我們節錄重要的部分:")])},function(){var e=this.$createElement,t=this._self._c||e;return t("div",{staticClass:"language-C# extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[this._v("using (e)   // Enumerator\n{\n    while (e.MoveNext())\n    {\n        int item = e.Current;\n\n        Assert.Equal(subState[subIndex], item); // Verify Current.\n        Assert.Equal(index / subLength, subIndex);\n\n        // 第一層的Source巡覽結束後才會Dispose\n        Assert.False(sourceDisposed); // Not yet.\n\n        // This represents whehter the sub-collection we're iterating thru right now\n        // has been disposed. Also not yet.\n        Assert.False(subCollectionDisposed[subIndex]);  // 目前的Sub因還在執行巡覽所以不會Dispose\n\n        // However, all of the sub-collections before us should have been disposed.\n        // Their indices should also be maxed out.\n        Assert.All(subState.Take(subIndex), s => Assert.Equal(subLength + 1, s));\n\n        // 此Source中的其他已巡覽完的Sub會Dispose\n        Assert.All(subCollectionDisposed.Take(subIndex), t => Assert.True(t));        \n\n        index++;\n    }\n}\n\n// 巡覽結束Source會Dispose\nAssert.True(sourceDisposed);\nAssert.Equal(sourceLength, subIndex);\nAssert.All(subState, s => Assert.Equal(subLength + 1, s));\nAssert.All(subCollectionDisposed, t => Assert.True(t));\n")])])])},function(){var e=this,t=e.$createElement,r=e._self._c||t;return r("ul",[r("li",[r("code",[e._v("Source")]),e._v("在全部巡覽完後"),r("code",[e._v("Dispose")])]),e._v(" "),r("li",[e._v("之前的"),r("code",[e._v("Sub")]),e._v("都應該"),r("code",[e._v("Dispose")])])])},function(){var e=this.$createElement,t=this._self._c||e;return t("h3",{attrs:{id:"collectioninterleavedwithlazyenumerables-toarray"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#collectioninterleavedwithlazyenumerables-toarray","aria-hidden":"true"}},[this._v("#")]),this._v(" CollectionInterleavedWithLazyEnumerables_ToArray")])},function(){var e=this,t=e.$createElement,r=e._self._c||t;return r("p",[e._v("我們都知道"),r("code",[e._v("IEnumerable")]),e._v("只會知道目前的元素資料，它是屬於一種"),r("strong",[e._v("延遲執行")]),e._v("的巡覽方式，而"),r("strong",[e._v("陣列")]),e._v("跟"),r("code",[e._v("Enumerable")]),e._v("的狀況不同，它一開始就知道"),r("strong",[e._v("所有的元素值")]),e._v("了，那如果把它們兩個同時放到一個"),r("code",[e._v("IEnumerable")]),e._v("要如何處理呢? 例如像下面這樣:")])},function(){var e=this.$createElement,t=this._self._c||e;return t("div",{staticClass:"language-C# extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[this._v("// Marker at the end\nnew IEnumerable<int>[]\n{\n    new TestEnumerable<int>(new int[] { 0 }),\n    new TestEnumerable<int>(new int[] { 1 }),\n    new TestEnumerable<int>(new int[] { 2 }),\n    new int[] { 3 },\n}\n")])])])},function(){var e=this,t=e.$createElement,r=e._self._c||t;return r("p",[e._v("當然我們還是可以把"),r("strong",[e._v("陣列")]),e._v("當作"),r("code",[e._v("IEnumerable")]),e._v("去做處理，這在一般的處理中是可以的(因為都必須要Call "),r("code",[e._v("MoveNext()")]),e._v(")，但在"),r("code",[e._v("ToArray()")]),e._v("中你的目標本來就是要轉為"),r("strong",[e._v("Array")]),e._v("了，你卻要把"),r("strong",[e._v("陣列")]),e._v("轉成"),r("code",[e._v("IEnumerable")]),e._v("再轉成"),r("strong",[e._v("Array")]),e._v("怎麼樣都划不來，因此"),r("code",[e._v("SelectMany")]),e._v("的"),r("code",[e._v("ToArray()")]),e._v("用了一個"),r("code",[e._v("Marker")]),e._v("來表示集合中的陣列，我們先來看程式碼:")])},function(){var e=this.$createElement,t=this._self._c||e;return t("div",{staticClass:"language-C# extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[this._v("public TResult[] ToArray()\n{\n    var builder = new SparseArrayBuilder<TResult>(initialize: true);\n    var deferredCopies = new ArrayBuilder<IEnumerable<TResult>>();\n\n    foreach (TSource element in _source)\n    {\n        IEnumerable<TResult> enumerable = _selector(element);\n\n        /* \n         * 是陣列(或是非延遲的集合)嗎?\n         * Yes: 將其的位置(Index)及數量(Count)加到builder.Markers中，然後傳回true\n         * No: 加到builder中，然後回傳false\n         */\n        if (builder.ReserveOrAdd(enumerable))\n        {\n            // 陣列內容加到deferredCopies中\n            deferredCopies.Add(enumerable);\n        }\n    }\n\n    // 將builder中的資料做ToArray的動作(因為已經排除了陣列的資料，所以沒有做多餘的轉換)\n    TResult[] array = builder.ToArray();\n\n    ArrayBuilder<Marker> markers = builder.Markers; // 取得陣列位置(Index)及數量(Count)資訊\n    for (int i = 0; i < markers.Count; i++)\n    {\n        Marker marker = markers[i];\n        IEnumerable<TResult> enumerable = deferredCopies[i];    // 取得陣列內容\n        EnumerableHelpers.Copy(enumerable, array, marker.Index, marker.Count);  // 複製到剛剛builder轉出來的陣列中\n    }\n\n    return array;\n}\n")])])])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("從上述的程式碼說明可以知道"),t("code",[this._v("ToArray()")]),this._v("的運作細節，這個測試案例就是在測這個部分，我是因為看到這個案例才知道它的實作方式這麼的特別，所以才在測試案例這個單元做說明，如果想要深入了解的可以仔細看看這個測試案例。")])},function(){var e=this.$createElement,t=this._self._c||e;return t("h2",{attrs:{id:"結語"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#結語","aria-hidden":"true"}},[this._v("#")]),this._v(" 結語")])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[t("code",[this._v("SelectMany")]),this._v("是在"),t("code",[this._v("Select")]),this._v("的基礎上多做事情，整體的邏輯更為複雜，希望透過本文的介紹可以讓大家更加了解這個方法的原理。")])},function(){var e=this.$createElement,t=this._self._c||e;return t("h2",{attrs:{id:"參考"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#參考","aria-hidden":"true"}},[this._v("#")]),this._v(" 參考")])}],!1,null,null,null);t.default=s.exports}}]);